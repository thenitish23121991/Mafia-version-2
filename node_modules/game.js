
var db = require('db');
var games = db.games;
var users = db.users;
var votes = db.votes;
var messages = db.messages


function get_random(max){
var max1 = max+1;
var num = Math.floor(Math.random()*max1);
num = num-1;
return num;
}


function set_player_role(game,player_name,role){
var set_role;
var result11111 = games.find({name:game});
result11111.on('complete',function(err1,docs1){
docs1[0].users.forEach(function(element,index){
if(docs1[0].users.name == player_name){
set_role = docs1[0].users.role;
}
});
if(set_role == 'player' && set_role == 'host'){
var result121 = games.update({"users.name":player_name},{$set:{"users.$.role":role}});
result121.on('complete',function(err,docs){
console.log('player: '+player_name+'/role: '+role);
});
}else{
set_player_role(game,player_name,role);
}
});
}

function get_game_info(game,callback){
var game1 = games.find({name:game});
game1.on('complete',function(err,docs){
callback(docs);
});
}

function get_role_count(game,role,callback){
var role_count;
var result1 = games.find({name:game},{users:{$elemMatch:{role:role}}});
result1.on('complete',function(err,docs){
callback(docs);
});
}

function assign_mafias(game,callback){
global.count1 = 0;
var get_game = get_game_info(game,function(docs1){
console.log('get game: '+docs1[0].users[0].name);

var game_users = docs1[0].users;
var total_mafias = get_role_count(game,'mafia',function(docs){

var game_users = docs[0].users;
game_users.forEach(function(element,index){
if(total_mafias == 'mafia'){
global.count1 = global.count1+1;
}
});
console.log('outside: '+global.count1);

if(global.count1 <= 3){
var num1 = get_random();
console.log(num1);
var player = game_users[num1].name;
set_player_role(game,player,'mafia');
callback('again');

}else{
callback('done');
}

});


});
}


function assign_citizens(game){
global.citizen_count1 = 0;
var get_game = get_game_info(game,function(docs1){
//console.log('get game: '+docs1[0].users[0].name);

var game_users = docs1[0].users;
var total_mafias = get_role_count(game,'citizen',function(docs){

var game_users = docs[0].users;
game_users.forEach(function(element,index){
if(game_users[index].role == 'citizen'){
global.citizen_count1 = global.citizen_count1+1;
}
});

if(global.citizen_count1 < 3){
var num1 = get_random();
console.log('citizen count: '+global.citizen_count1);
var player = game_users[num1].name;
set_player_role(game,player,'citizen');


}else{
callback('done');
}

});


});
}

function assign_healer(game,users){
var total_healers = get_player_role(game,'healer',function(h1){
if(total_healers >= 1){
var num1 = get_random();
var player = users[num1];
set_player_role(game,player,'healer',function(data11){
assign_citizens();
});
}else{
return;
}
});
}

function assign_detective(game,users){
var total_healers = get_player_role(game,'detective',function(h1){
if(total_healers >= 1){
var num1 = get_random();
var player = users[num1];
set_player_role(game,player,'detective',function(data11){
assign_detective();
});
}else{
return;
}
});
}

function assign_dacoit(game,users){
var total_healers = get_player_role(game,'dacoit',function(h1){
if(total_healers >= 1){
var num1 = get_random();
var player = users[num1];
set_player_role(game,player,'dacoit',function(data11){
assign_dacoit();
});
}else{
return;
}
});
}


function assign_players(game,callback){
assign_mafias(game,function(action){
if(action == 'again'){
assign_mafias(game);
}else{
return;
}
});
var c_res = assign_citizens(game);


callback('done');
}


function add_game_player(game,player,try_count){
var roles = ['mafia','citizen','healer','detective','dacoit'];
var num_a = get_random(roles.length);
try_count = try_count+1;
var set_role = "none";
var role_name = 'none';
var role_count = 0;
var result1 = games.find({name:game});
result1.on('complete',function(err,data12){
console.log(err+'v'+data12);
var game_users = data12[0].users;
console.log('role: '+roles[num_a]);
var new_user = new Array();
if(roles[num_a] == 'mafia'){
if(data12[0].mafias_count < 3){
set_role = 'mafia';
role_name = 'mafias_count';
role_count = data12[0].mafias_count+1;
var user_json = {'name':player,'role':set_role,'status':'alive'};
game_users.push(user_json);
var result2 = games.update({name:game},{$set:{users:game_users,mafias_count:role_count}});
result2.on('complete',function(err,docs){
console.log(docs);
});
}else{
//if(try_count < 15){
add_game_player(game,player,try_count);
/*}else{
return;
}
*/
}
}else if(roles[num_a] == 'citizen'){
if(data12[0].citizens_count < 3){
set_role = 'citizen';
role_name = 'citizens_count';
role_count = data12[0].citizens_count+1;
var user_json = {'name':player,'role':set_role,'status':'alive'};
game_users.push(user_json);
var result2 = games.update({name:game},{$set:{users:game_users,citizens_count:role_count}});
result2.on('complete',function(err,docs){
console.log(docs);
});
}
else{
//if(try_count < 15){
add_game_player(game,player,try_count);
/*}else{
return;
}
*/
}
}else if(roles[num_a] == 'healer'){
if(data12[0].healer_count < 1){
set_role = 'healer';
role_name = 'healer_count';
role_count = data12[0].healer_count+1;
var user_json = {'name':player,'role':set_role,'status':'alive'};
game_users.push(user_json);
var result2 = games.update({name:game},{$set:{users:game_users,healer_count:role_count}});
result2.on('complete',function(err,docs){
console.log(docs);
});
}else{
//if(try_count < 15){
add_game_player(game,player,try_count);
/*}else{
return;
}
*/
}
}else if(roles[num_a] == 'detective'){
if(data12[0].detective_count < 1){
set_role = 'detective';
role_name = 'detective_count';
role_count = data12[0].detective_count+1;
var user_json = {'name':player,'role':set_role,'status':'alive'};
game_users.push(user_json);
var result2 = games.update({name:game},{$set:{users:game_users,detective_count:role_count}});
result2.on('complete',function(err,docs){
console.log(docs);
});
}else{
//if(try_count < 15){
add_game_player(game,player,try_count);
/*}else{
return;
}
*/
}
}else if(roles[num_a] == 'dacoit'){
if(data12[0].dacoit_count < 1){
set_role = 'dacoit';
role_name = 'dacoit_count';
role_count = data12[0].dacoit_count+1;
var user_json = {'name':player,'role':set_role,'status':'alive'};
game_users.push(user_json);
var result2 = games.update({name:game},{$set:{users:game_users,dacoit_count:role_count}});
result2.on('complete',function(err,docs){
console.log(docs);
});
}else{
//if(try_count < 15){
add_game_player(game,player,try_count);
/*}else{
return;
}
*/
}
}else{
//if(try_count < 15){
add_game_player(game,player,try_count);
/*}else{
return;
}
*/
}

});
}


function kill_person(game,player,status,callback){
var result111 = games.update({"users.name":player},{$set:{"users.$.status":status}});
result111.on('complete',function(err,docs){
callback(docs);
});
}

module.exports = {


add_game : function(name,user,callback){
console.log('request');
var roles = ['mafia','citizen','healer','detective','dacoit'];
var num1 = get_random(5);
var role1 = roles[num1];
var role_count = 0;
var mafia_answers = new Array();
var game_users = new Array();
var user_json = {'name':user,'role':role1,'status':'alive'};
var healer_healed = new Array();
var healer_killed = new Array();
var healer_answer = new Array();
game_users.push(user_json);
if(role1 == 'mafia'){
var result12 = games.insert({name:name,users:game_users,mafias_count:1,citizens_count:0,detective_count:0,dacoit_count:0,healer_count:0,mafia_answers:mafia_answers,healer_healed:healer_healed,healer_killed:healer_killed,healer_answer:healer_answer,detective_answer:''});
}else if(role1 == 'citizen'){
var result12 = games.insert({name:name,users:game_users,mafias_count:0,citizens_count:1,detective_count:0,dacoit_count:0,healer_count:0,mafia_answers:mafia_answers,healer_healed:healer_healed,healer_killed:healer_killed,healer_answer:healer_answer,detective_answer:''});
}else if(role1 == 'healer_count'){
var result12 = games.insert({name:name,users:game_users,mafias_count:0,citizens_count:0,detective_count:0,dacoit_count:0,healer_count:1,mafia_answers:mafia_answers,healer_healed:healer_healed,healer_killed:healer_killed,healer_answer:healer_answer,detective_answer:''});
}else if(role1 == 'detective'){
var result12 = games.insert({name:name,users:game_users,mafias_count:0,citizens_count:0,detective_count:1,dacoit_count:0,healer_count:0,mafia_answers:mafia_answers,healer_healed:healer_healed,healer_killed:healer_killed,healer_answer:healer_answer,detective_answer:''});
}else if(role1 == 'dacoit'){
var result12 = games.insert({name:name,users:game_users,mafias_count:0,citizens_count:0,detective_count:0,dacoit_count:1,healer_count:0,mafia_answers:mafia_answers,healer_healed:healer_healed,healer_killed:healer_killed,healer_answer:healer_answer,detective_answer:''});
}
//var result12 = games.insert({name:name,users:game_users,mafias_count:0,citizens_count:0,detective_count:0,dacoit_count:0,healer_count:0});
result12.on('complete',function(err,docs){
var game_first_vote = new Array();
var game_final_vote = new Array();
var vote1 = votes.insert({game:name,first_vote:game_first_vote,final_vote:game_final_vote});
vote1.on('complete',function(){
callback(docs);
console.log(role1);
});
});
},


add_player_to_game : function(game,player_name,callback){
add_game_player(game,player_name);
},

get_live_games : function(callback){
console.log('request');
var result1 = games.find({});
result1.on('complete',function(err,docs){
callback(docs);
});
},

add_nick : function(name,callback){
console.log('add nick');
var result133 = users.find({name:name});
result133.on('complete',function(err1,docs1){
if(docs1.length > 0){
callback('nick already taken');
}else{
var result112 = users.insert({name:name});
result112.on('complete',function(err,docs){
callback(docs);
});
}
});
},


get_game_id_from_name : function(name,docs){
var game1 = games.find({name:name});
game1.on('complete',function(err,docs){
callback(docs);
});
},



get_game_players : function(name,callback){
var result113 = games.find({name:name});
result113.on('complete',function(err,docs){
callback(docs);
});
},

get_game_mafias : function(name,callback){
var result112 = games.find({name:name});
result112.on('complete',function(err,docs){
callback(docs);
});
},


get_player_role : function(game,player,callback){
var role;
var result1 = games.find({name:game},{users:{$elemMatch : {name:/^player$/}}});
result1.on('complete',function(err,docs){
docs[0].users.forEach(function(element,index){
if(docs[0].users[index].name == player){
role = docs[0].users[index].role;
}
});
callback(role);
});
},

add_message : function(game,player_name,message,role,callback){
var result111 = messages.insert({game:game,player_name:player_name,message:message,role:role});
result111.on('complete',function(err,docs){
callback(docs);
});
},

get_mafia_messages : function(game,callback){
var result111 = messages.find({game:game,role:'mafia'});
result111.on('complete',function(err,docs){
callback(docs);
});
},

get_citizen_messages : function(game,callback){
var result111 = messages.find({game:game,role:'citizen'});
result111.on('complete',function(err,docs){
callback(docs);
});
},

get_citizen_messages : function(){

},


add_mafia_answers : function(game,answer,callback){
var result112 = games.find({name:game});
result112.on('complete',function(err,docs1){
var answers = docs1[0].answers;
answers.push(answer);
var result121 = games.update({name:game},{$set:{mafia_answers:answers}});
resultl21.on('complete',function(err,docs){
callback(docs);
});
});
},

add_healer_answer : function(game,answer,callback){
var result111 = games.update({name:game},{$set:{healer_answer:answer}});
result111.on('complete',function(err,docs){
callback(docs);
});
},

kill_person : function(game,player,callback){
var result111 = games.update({game:game},{$set:{role:'dead'}});
result111.on('complete',function(err,docs){
callback(docs);
});
},

has_role : function(game,player,callback){
var role = 'none';
var game12 = games.find({name:game},{users:{$elemMatch:{name:/^player$/}}});
game12.on('complete',function(err,docs){
docs[0].users.forEach(function(element,index){
if(docs[0].users[index].name == player){
role = docs[0].users[index].role;
}
});
callback(role);
});
},

is_this_mafia : function(game,player,callback){
var res1 = games.find({name:game});
res1.on('complete',function(err1,docs1){
docs1[0].users.forEach(function(){

});
});
},

is_game_ready : function(game,callback){
var result2 = games.find({name:game});
result2.on('complete',function(err1,docs1){
if(docs1[0].users.length == 9){
callback('game ready');
}else{
callback('game not ready');
}
});
},


add_mafia_answer : function(game,answer,player,callback){
var mafia_answers = new Array();
var answer_item = {name:player,answer:answer};
var result3 = games.find({name:game});
result3.on('complete',function(err,docs){
if(docs[0].mafia_answers.length < 3){

mafia_answers = docs[0].mafia_answers;
mafia_answers.push(answer_item);
var result4 = games.update({name:game},{$set:{mafia_answers:mafia_answers}});
result4.on('complete',function(err1,docs1){
callback(docs);
});
}
});
},


mafia_answer_result : function(answers,callback){
var count1 = 0;
var count2 = 0;
var count3 = 0;
var count_result = "";
console.log('answer1: '+answers[0].answer+' answer2: '+answers[1].answer+' answer3: '+answers[2].answer);
answers.forEach(function(element,index){
if(answers[index].answer == answers[0].answer){
count1 = count1+1;
}else if(answers[index].answer == answers[1].answer){
count2 = count2+1;
}else if(answers[index].answer == answers[2].answer){
count3 = count3+1;
}
});
if(count1 > 1){
count_result = answers[0];
}else if(count2 > 1){
count_result = answers[1];
}else if(count3 > 1){
count_result = answers[2];
}else{
count_result = 'no result';
}
console.log('count1: '+count1+' count2: '+count2+' count3: '+count3);
callback(count_result);
},

get_current_role : function(game,user,callback){
console.log(game);
var result111 = games.find({name:game});
var current_role = "";
result111.on('complete',function(err,docs){
docs[0].users.forEach(function(element,index){
if(docs[0].users[index].name == user){
current_role = docs[0].users[index].role;
}
});
callback(current_role);
});
},

has_mafia_added_answer : function(){
var result111 = games.find({});
},




inform_city : function(game,callback){
var dead_players = new Array();
var result112 = games.find({name:game});
result112.on('complete',function(err,docs){
docs[0].users.forEach(function(element,index){
if(docs[0].users[index].status == 'dead'){
dead_players.push(docs[0].users[index].name);
}
});
callback(dead_players);
});
},

add_first_vote : function(game,player,vote,callback){
var game_first_vote = new Array();
var first_vote = new Array();
var result12 = votes.find({game:game});
result12.on('complete',function(err,docs){
console.log('add first vote docs: '+docs);
first_vote = docs[0].first_vote;
console.log('add first vote, first vote: '+docs[0].first_vote);
first_vote.push({'name':player,'vote':vote});
var result11 = votes.update({game:game},{$set:{first_vote:first_vote}});
result11.on('complete',function(err1,docs1){
callback(docs1);
});
});
},


add_final_vote : function(game,player,vote,callback){
var final_vote = new Array();
var result12 = votes.find({game:game});
result12.on('complete',function(err,docs){
final_vote = docs[0].final_vote;
final_vote.push({'name':player,'vote':vote});
var result11 = votes.insert({final_vote:final_vote});
result11.on('complete',function(){
callback(docs1);
});
});
},


get_vote_results : function(votes,callback){
var count1,count2,count3,count4,count5,count6,count7,count8,count9;
var count_rank = new Array();
votes.forEach(function(element,index){
if(votes[index].vote == votes[0].vote){
count1 = count1+1;
}else if(votes[index].vote == votes[1].vote){
count1 = count1+1;
}
else if(votes[index].vote == votes[2].vote){
count2 = count2+1;
}
else if(votes[index].vote == votes[3].vote){
count3 = count3+1;
}
else if(votes[index].vote == votes[4].vote){
count4 = count4+1;
}
else if(votes[index].vote == votes[5].vote){
count5 = count5+1;
}
else if(votes[index].vote == votes[6].vote){
count6 = count6+1;
}
else if(votes[index].vote == votes[7].vote){
count7 = count7+1;
}
else if(votes[index].vote == votes[8].vote){
count8 = count8+1;
}
else if(votes[index].vote == votes[9].vote){
count9 = count9+1;
}
});

},

get_user_invited_games : function(player,callback){
var result1 = invites.find({player:player});
result1.on('complete',function(err2,docs2){
callback(docs2);
});
},


add_invite_to_game : function(game,player,callback){
var result1 = invites.insert({game:game,player:player});
result1.on('complete',function(err1,docs1){
callback(docs1);
});
},

get_invited_players : function(game,callback){
var result1 = invites.find({name:game});
result1.on('complete',function(err1,docs1){
callback(docs1);
});
},

add_game_message : function(game,player,type,message,callback){
var message1 = messages.insert({game:game,player:player,type:type,message:message});
message1.on('complete',function(err1,docs1){
callback(docs1);
});
},

get_game_messages : function(game,type,callback){
var message1 = messages.find({game:game,type:type});
message1.on('complete',function(err1,docs1){
callback(docs1);
});
},


has_healer_killed : function(game,callback){
var result1 = games.find({name:game});
result1.on('complete',function(err1,docs1){
if(docs1[0].healer_killed.length == 0){
callback('nobody killed');
}else{
callback(docs1[0].healer_killed[0].name);
}
});
},

has_healer_healed : function(game,callback){
var result1 = games.find({name:game});
result1.on('complete',function(err2,docs2){
if(docs2[0].healer_healed.length == 0){
callback('nobody healed');
}else{
callback(docs2[0].healer_healed[0].name);
}
});
},


add_healer_answer : function(game,player,callback){
kill_person(game,player,'dead',function(data1111){
console.log('person killed');
var healer_answer = new Array();
var answer_json = {name:player};
healer_answer.push(answer_json);
var result2 = games.update({name:game},{$set:{healer_answer:healer_answer,healer_killed:healer_answer}});
result2.on('complete',function(err2,docs2){
callback(docs2);
});
});
},

add_healer_healed : function(game,player,callback){
var healer_healed = new Array();
var healer_answer = {name:player};
healer_healed.push(healer_answer);
var result3 = games.update({name:game},{$set:{healer_healed:healer_healed}});
result3.on('complete',function(err3,docs3){
console.log('game: '+docs3);
callback(docs3);
});
},


has_mafia_answered : function(game,callback){
var result1 = games.find({name:game});
result1.on('complete',function(err3,docs3){
console.log(docs3[0].mafia_answers.length);
if(docs3[0].mafia_answers.length == 3){
callback('mafias answered');
}else{
callback('not answered');
}
});
},

has_healer_answered : function(game,callback){
var result2 = games.find({name:game});
result2.on('complete',function(err2,docs2){
if(typeof docs2[0].healer_answer != "undefined"){
if(docs2[0].healer_answer.length != 0){
callback('healer answered');
}else{
callback('healer has not answered');
}
}
});
},


add_detective_answer : function(game,player,callback){
var result3 = games.update({name:game},{$set:{detective_answer:player}});
result3.on('complete',function(err3,docs3){
callback('answer added');
});
},


has_detective_answered : function(game,callback){
var result2 = games.find({name:game});
result2.on('complete',function(err4,docs4){
if(docs4[0].detective_answer != ''){
callback('detective has answered');
}else{
callback('detective has not answered');
}
});
},


get_killed_players : function(game,callback){
var killed_players = new Array();
var result8 = games.find({name:game});
result8.on('complete',function(err4,docs4){
docs4[0].users.forEach(function(element,index){
if(docs4[0].users[index].status == "dead"){
killed_players.push(docs4[0].users[index].name);
}
});
callback(killed_players);
});
},


is_suspect_correct : function(game,player,callback){
var correct = 'false';
var result12 = games.find({name:game});
result12.on('complete',function(err1,docs1){
docs1[0].users.forEach(function(element,index){
if(docs1[0].users[index].name == player){
if(docs1[0].users[index].role == 'mafia'){
correct = 'true';
}
}
});
if(correct == 'true'){
callback('correct');
}else{
callback('incorrect');
}
});
},

dacoit_kill_person : function(game,user,answer,callback){
var result121 = games.update({"users.name":answer},{$set:{"users.$.status":'dead'}});
result121.on('complete',function(err3,docs3){
var result122 = games.update({"users.name":user},{$set:{"users.$.status":'dead'}});
result122.on('complete',function(err2,docs2){
callback('person killed');
});
});
},



is_first_vote_done : function(game,callback){
var result3 = votes.find({game:game});
result3.on('complete',function(err3,docs3){
if(docs3[0].first_vote.length == 9){
callback('first vote done');
}else{
callback('first vote not done');
}
});
},


add_final_answer : function(game,player,answer,callback){
console.log('game add final answer');
var final_answer_arr = new Array();
var result12 = votes.find({game:game});
result12.on('complete',function(err4,docs4){
final_answer_arr = docs4[0].final_vote;
var final_answer_json = {name:player,vote:answer};
final_answer_arr.push(final_answer_json);
var result4 = votes.update({game:game},{$set:{final_vote:final_answer_arr}});
result4.on('complete',function(err5,docs5){
callback('final vote added');
});
});
},


is_final_vote_done : function(game,callback){
var result3 = votes.find({game:game});
result3.on('complete',function(err3,docs3){
if(docs3[0].final_vote.length == 9){
callback('final vote done');
}else{
callback('final vote not done');
}
});
},


has_game_ended : function(game,callback){
var mafias_count = 0;
var citizens_count = 0;
var result4 = games.find({name:game});
result4.on('complete',function(err3,docs3){
docs3[0].users.forEach(function(element,index){
if(docs3[0].users[index].role == 'mafia' && docs3[0].users[index].status == 'alive'){
mafias_count = mafias_count+1;
}else if(docs3[0].users[index].role == 'citizen' && docs3[0].users[index].status == 'alive'){
citizens_count = citizens_count+1;
}
});
console.log('mafias count: '+mafias_count+' citizens count: '+citizens_count);
if(mafias_count == 0 || citizens_count == 0){
callback('game has ended');
}else{
callback('game has not ended');
}
});
},


get_game_result : function(game,callback){
var mafias_count = 0;
var citizens_count = 0;
var result4 = games.find({name:game});
result4.on('complete',function(err3,docs3){
docs3[0].users.forEach(function(element,index){
if(docs3[0].users[index].role == 'mafia' && docs3[0].users[index].status == 'alive'){
mafias_count = mafias_count+1;
}else if(docs3[0].users[index].role == 'citizen' && docs3[0].users[index].status == 'alive'){
citizens_count = citizens_count+1;
}
});
console.log('mafias count: '+mafias_count+' citizens count: '+citizens_count);
if(mafias_count == 0){
callback('Congratulations Citizens, you have won');
}else if(citizens_count == 0){
callback('Congratulations Mafias, you have won');
}
});
},


start_game_cycle : function(game,callback){
var mafia_answers1 = new Array();
var first_vote_arr = new Array();
var final_vote_arr = new Array();
var result5 = games.update({name:game},{$set:{mafia_answers:mafia_answers1,detective_answer:''}});
result5.on('complete',function(err5,docs5){
var result122 = votes.update({game:game},{$set:{first_vote:first_vote_arr,final_vote:final_vote_arr}});
result122.on('complete',function(err6,docs6){
callback('game has been reset');
});
});
},


init_mafia : function(game,callback){
var mafia_answers1 = new Array();
var result12 = games.update({name:game},{$set:{mafia_answers:mafia_answers1}});
result12.on('complete',function(err7,docs7){
callback('mafias init');
});
},

init_votes : function(game,callback){
var first_vote_arr = new Array();
var final_vote_arr = new Array();
var result22 = votes.update({game:game},{$set:{first_vote:first_vote_arr,final_vote:final_vote_arr}});
result22.on('complete',function(err8,docs8){
callback('votes init');
});
},


has_mafia_voted : function(game,user,callback){
var game_users = new Array();
var has_voted = 'no';
var result1212 = games.find({name:game});
result1212.on('complete',function(err9,docs9){
game_users = docs9[0].mafia_answers;
console.log(game_users);
game_users.forEach(function(element,index){
if(game_users[index].name == user){
console.log(game_users[index].name);
has_voted = 'yes';
}
});
callback(has_voted);
});
},


has_user_voted_first : function(game,user,callback){
var first_vote_arr = new Array();
var has_voted = 'no';
var result22 = votes.find({game:game});
result22.on('complete',function(err1,docs1){
first_vote_arr = docs1[0].first_vote;
first_vote_arr.forEach(function(element,index){
if(first_vote_arr[index].name == user){
has_voted = 'yes';
}
});
callback(has_voted);
});
},

has_user_voted_final : function(){
var final_vote_arr = new Array();
var has_voted = 'no';
var result22 = votes.find({game:game});
result22.on('complete',function(err1,docs1){
final_vote_arr = docs1[0].final_vote;
final_vote_arr.forEach(function(element,index){
if(final_vote_arr[index].name == user){
has_voted = 'yes';
}
});
callback(has_voted);
});
},


dacoit_killed : function(game,dacoit,player,callback){
var result121 = games.update({"users.name":player},{$set:{"users.$.role":'dead'}});
result121.on('complete',function(err2,docs2){
var result131 = games.update({"users.name":dacoit},{$set:{"users.$.role":'dead'}});
result131.on('complete',function(err3,docs3){
callback('Dacoit has killed '+player);
});
});
},


get_first_user_vote_results : function(game,callback){
var votes_arr = new Array();
var final_players = new Array();
var counts_arr = new Array();
var count1 = 0;
var count2 = 0;
var count3 = 0;
var count4 = 0;
var count5 = 0;
var count6 = 0;
var count7 = 0;
var count8 = 0;
var count9 = 0;
var counts_arr1 = [count1,count2,count3,count4,count5,count6,count7,count8,count9]
var player_index;
var game_users = new Array();
var vote_max = new Array();
var result151 = games.find({name:game});
result151.on('complete',function(err6,docs6){
game_users = docs6[0].users;
console.log('users: '+game_users);
var result131 = votes.find({game:game});
result131.on('complete',function(err6,docs6){
votes_arr = docs6[0].first_vote;
console.log('votes: '+votes_arr);
votes_arr.forEach(function(element1,index1){
game_users.forEach(function(element3,index3){
if(votes_arr[index1].vote == game_users[index3].name){
player_index = index3;
}
});
counts_arr1[player_index] = counts_arr1[player_index]+1;
});
counts_arr1.forEach(function(element,num){
if(element == 9){
vote_max.push(game_users[num].name);
}
else if(element == 8){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 7){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 6){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 5){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 4){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 3){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 2){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 1){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
});

console.log('vote max: '+vote_max);
callback(vote_max);
});
});
},



get_final_user_vote_results : function(game,callback){
var votes_arr = new Array();
var final_players = new Array();
var counts_arr = new Array();
var count1 = 0;
var count2 = 0;
var count3 = 0;
var count4 = 0;
var count5 = 0;
var count6 = 0;
var count7 = 0;
var count8 = 0;
var count9 = 0;
var counts_arr1 = [count1,count2,count3,count4,count5,count6,count7,count8,count9]
var player_index;
var game_users = new Array();
var vote_max = new Array();
var result151 = games.find({name:game});
result151.on('complete',function(err6,docs6){
game_users = docs6[0].users;
console.log('users: '+game_users);
var result131 = votes.find({game:game});
result131.on('complete',function(err6,docs6){
votes_arr = docs6[0].final_vote;
console.log('votes: '+votes_arr);
votes_arr.forEach(function(element1,index1){
game_users.forEach(function(element3,index3){
if(votes_arr[index1].vote == game_users[index3].name){
player_index = index3;
}
});
counts_arr1[player_index] = counts_arr1[player_index]+1;
});
counts_arr1.forEach(function(element,num){
console.log('element: '+element);
if(element == 9){
vote_max.push(game_users[num]);
}
else if(element == 8){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 7){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 6){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 5){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 4){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 3){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 2){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
else if(element == 1){
if(vote_max.length < 2){
vote_max.push(game_users[num].name);
}
}
});

console.log('vote max: '+vote_max);
callback(vote_max);
});
});
},


update_final_vote_results : function(vote_arr,callback){
vote_arr.forEach(function(element,index){
var vote_user = vote_arr[index];
var result121 = games.update({"users.name":vote_user},{$set:{"users.$.status":'dead'}});
result121.on('complete',function(err8,docs8){

});
});
callback('updated');
},


has_user_voted_first : function(game,user,callback){
var has_voted = 'no';
var result4 = votes.find({game:game});
result4.on('complete',function(err9,docs9){
docs9[0].first_vote.forEach(function(element,index){
if(docs9[0].first_vote[index].name == user){
has_voted = 'yes';
}
});
if(has_voted == 'no'){
callback('no');
}else{
callback('yes');
}
});
},


has_user_voted_final : function(game,user,callback){
var has_voted = 'no';
var result4 = votes.find({game:game});
result4.on('complete',function(err9,docs9){
docs9[0].final_vote.forEach(function(element,index){
if(docs9[0].final_vote[index].name == user){
has_voted = 'yes';
}
});
if(has_voted == 'no'){
callback('no');
}else{
callback('yes');
}
});
},


add_explain_yourself_message : function(game,user,message,callback){
var result131 = messages.insert({game:game,role:'explain'});
resul131.on('complete',function(err6,docs6){
callback(docs);
});
},


get_explain_yourself_messages : function(game,callback){
var result141 = messages.find({game:game,role:'explain'});
result141.on('complete',function(err6,docs6){
callback(docs);
});
},


assign_mafias : assign_mafias,
assign_players : assign_players,
set_player_role : set_player_role,
get_game_info : get_game_info,
kill_person: kill_person


}